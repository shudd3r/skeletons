name: build
on: [push, pull_request]

jobs:
  coverage-build:
    name: "Coverage tests"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: ['ubuntu-latest']
        php-versions: ['7.4']
    env:
      extensions: pcov, dom, json, libxml, mbstring, pdo_sqlite, soap, xml, xmlwriter
      key: cache-v1
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup PHP extensions cache environment"
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}
      - name: "Cache PHP extensions"
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}
      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: pcov
          extensions: ${{ env.extensions }}
          ini-values: assert.exception=1, zend.assertions=1
      - name: "Validate composer.json"
        run: composer validate
      - name: "Setup composer cache"
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: "Install highest dependencies"
        run: composer update --no-interaction --no-ansi --no-progress --prefer-stable
      - name: "Run PhpUnit tests with coverage"
        run: |
          mkdir -p build/logs
          vendor/bin/phpunit --exclude-group integrated --coverage-clover build/logs/clover.xml
      - name: "Send coverage report to coveralls.io"
        run: vendor/bin/php-coveralls -v
        env:
          COVERALLS_RUN_LOCALLY: 1
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  lowest-build:
    name: "Lowest build tests"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: ['ubuntu-latest']
        php-versions: ['7.4']
    env:
      extensions: dom, json, libxml, mbstring, pdo_sqlite, soap, xml, xmlwriter
      key: cache-v1
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup PHP extensions cache environment"
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}
      - name: "Cache PHP extensions"
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}
      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: none
          extensions: ${{ env.extensions }}
          ini-values: assert.exception=1, zend.assertions=1
      - name: "Setup composer cache"
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-lowest-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-lowest-
      - name: "Install lowest dependencies"
        run: composer update --no-interaction --no-ansi --no-progress --prefer-stable --prefer-lowest
      - name: "Run PhpUnit tests"
        run: vendor/bin/phpunit --no-coverage

  php-os-builds:
    name: "PHP 8 tests"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        php-versions: ['8.0']
    env:
      extensions: pcov, dom, json, libxml, mbstring, pdo_sqlite, soap, xml, xmlwriter
      key: cache-v1
    steps:
      - name: "Turn off git EOL conversion"
        run: git config --global core.autocrlf false
      - name: "Checkout"
        uses: actions/checkout@v2
      - name: "Setup PHP extensions cache environment"
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}
      - name: "Cache PHP extensions"
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}
      - name: "Install PHP with extensions"
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: none
          extensions: ${{ env.extensions }}
          ini-values: assert.exception=1, zend.assertions=1
      - name: "Setup composer cache"
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php${{ matrix.php-versions }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php${{ matrix.php-versions }}-composer-
      - name: "Install highest dependencies"
        run: composer update --no-interaction --no-ansi --no-progress --prefer-stable
      - name: "Run PhpUnit tests"
        run: vendor/bin/phpunit --no-coverage
